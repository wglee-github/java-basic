제네릭이란
- 컴파일 시 타입을 체크해주는 기능 - JDK1.5부터 기능이 추가됨.

주요기능
제네릭
제한된 제네릭
와일드 카드
와일드 카드 + 제한된 제네릭
제네릭 메서드
제네릭 형변환
제네릭은 타입 정보를 컴파일 타임에만 알게 됩니다. 즉, 런타임에는 타입 정보가 제거됩니다 (타입 소거). 
Ex. 런타임 시 List<ContInfo> -> List 로 바뀌게 된다.

사용 방법 (자세한 사용방법은 실제 코드를 통해 확인


사용방법 시 필요한 특징 및 제한사항 등등 알면 좋은 것들.
1. static 이 선언된 클래스, 변수, 메서드에서는 사용할 수 없다.
- 제네릭 타입의 장점은 인스턴스별로 다르게 객체를 대입할 수 있다. 그런데 static은 모든 인스턴스에서 공통으로 사욯되기 때문에 사용 불가.

2. 


제네릭 메서드
* 제네릭 메서드에 선언된 타입 매개변수는 메서드 내에서만 유효하다. 
* 클래스에 선언된 타입 매개변수와는 전혀 상관없다. 심지어 이름이 같아도 상관없다. (이름이 같은 경우 사용은 되나 경고가 발생함) 
* 제네릭 메서드의 타입 매개변수 선언은 반환타입 앞에 해주면 된다. 
* 제네릭 메서드의 타입 매개변수는 반환타입과 파라미터에 영향을 준다.( Ex. public <E> E getList(E name){} )

	public <E> E getList(E name) {
		log.info("제네릭 메서드");
		return name;
	}
	

* 메서드의 매개변수로 제네릭 타입변수를 사용할 수 없다.
Ex. public void makeJuice3(FruitBox3<T extends Mom2> box) <- 오류 발생

그럼 사용하려면
1. 와일드카드로 변경해야한다.
2. 제네릭 메서드로 만들면 된다.

* static 메서드의 매개변수에 제네릭 타입변수를 받을 수 없으나, 제네릭 메서드로 만들면 가능하다.

	public void makeJuice3(FruitBox3<? extends Mom2> box) {
		log.info("제한된 제네릭 메서드");
	}
	static <T extends Fruit3> void makeJuice2(FruitBox3<T> box) {
		log.info("제한된 제네릭 메서드");
	}